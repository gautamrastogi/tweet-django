{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","classname","onSubmit","event","preventDefault","console","log","current","value","newVal","tempNewTweets","unshift","content","like","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","likes","setLikes","userLikes","setUserLikes","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.7bc7d891.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport { loadTweets } from \"../lookup\";\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef()\r\n  const [newTweets, setNewTweets] = useState([])\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(event);\r\n    console.log(textAreaRef.current.value)\r\n    const newVal = textAreaRef.current.value \r\n    let tempNewTweets = [...newTweets]\r\n    tempNewTweets.unshift({\r\n      content: newVal,\r\n      like: 0,\r\n      id:132\r\n    })\r\n    setNewTweets(tempNewTweets)\r\n    textAreaRef.current.value =  ''\r\n\r\n  };\r\n  return (\r\n    <div className={props.classname}>\r\n      <div className=\"col-30 mb-20\">\r\n        <form onSubmit={handleSubmit}>\r\n          <textarea ref={textAreaRef} required={true} className=\"form-control\" name=\"tweet\"></textarea>\r\n          <button type=\"submit\" className=\"btn btn-primary my-3\">Tweet</button>\r\n        </form>\r\n      </div>\r\n      <TweetsList newTweets= {newTweets} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([])\r\n  useEffect(() => {\r\n    const  final  = [...props.newTweets].concat(tweetsInit)\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final)\r\n    } \r\n  }, [tweets,props.newTweets,tweetsInit]);\r\n\r\n  useEffect(() => {\r\n    const myCallback = (response, status) => {\r\n      console.log(response, status);\r\n      if (status === 200) {\r\n        setTweetsInit(response);\r\n      } else {\r\n        alert(\"There was an error\");\r\n      }\r\n    };\r\n    loadTweets(myCallback);\r\n  }, []);\r\n\r\n  return tweets.map((item, index) => {\r\n    return (\r\n      <Tweet\r\n        tweet={item}\r\n        className=\"my-5 py-5 border bg-white text-dark\"\r\n        key={`${index}-{item.id}`}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action } = props;\r\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n  const [userLikes, setUserLikes] = useState(\r\n    tweet.userLikes === true ? true : false\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n  const actionDisplay = action.display ? action.display : \"Action\";\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    if (action.type === \"like\") {\r\n      if (userLikes === true) {\r\n        setLikes(likes - 1);\r\n        setUserLikes(false);\r\n      } else {\r\n        setLikes(likes + 1);\r\n        setUserLikes(true);\r\n      }\r\n    }\r\n\r\n    if (action.type === \"retweet\") {\r\n      console.log(\"Like\");\r\n    }\r\n  };\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function Tweet(props) {\r\n  const { tweet } = props;\r\n  const className = props.className\r\n    ? props.className\r\n    : \"col-10 mx-auto col-md-6\";\r\n  return (\r\n    <div className={className}>\r\n      <p>\r\n        {tweet.id} - {tweet.content}\r\n      </p>\r\n      <div className=\"btn btn-group\">\r\n        <ActionBtn tweet={tweet} action={{ type: \"like\", display: \"Likes\" }} />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"unlike\", display: \"UnLike\" }}\r\n        />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"retweet\", display: \"Retweet\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET' // \"POST\"\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function() {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div><TweetsComponent /></div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { TweetsComponent } from \"./tweets\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst appEl = document.getElementById(\"root\");\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\nconst tweetsEl = document.getElementById(\"tweetme-2\");\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}